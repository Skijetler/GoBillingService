// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: billing/v1/billing.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on CreateAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountReplyMultiError, or nil if none found.
func (m *CreateAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return CreateAccountReplyMultiError(errors)
	}

	return nil
}

// CreateAccountReplyMultiError is an error wrapping multiple validation errors
// returned by CreateAccountReply.ValidateAll() if the designated constraints
// aren't met.
type CreateAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountReplyMultiError) AllErrors() []error { return m }

// CreateAccountReplyValidationError is the validation error returned by
// CreateAccountReply.Validate if the designated constraints aren't met.
type CreateAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountReplyValidationError) ErrorName() string {
	return "CreateAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountReplyValidationError{}

// Validate checks the field values on GetAccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountInfoRequestMultiError, or nil if none found.
func (m *GetAccountInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetAccountInfoRequestMultiError(errors)
	}

	return nil
}

// GetAccountInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccountInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountInfoRequestMultiError) AllErrors() []error { return m }

// GetAccountInfoRequestValidationError is the validation error returned by
// GetAccountInfoRequest.Validate if the designated constraints aren't met.
type GetAccountInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoRequestValidationError) ErrorName() string {
	return "GetAccountInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoRequestValidationError{}

// Validate checks the field values on GetAccountInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountInfoReplyMultiError, or nil if none found.
func (m *GetAccountInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Balance

	if len(errors) > 0 {
		return GetAccountInfoReplyMultiError(errors)
	}

	return nil
}

// GetAccountInfoReplyMultiError is an error wrapping multiple validation
// errors returned by GetAccountInfoReply.ValidateAll() if the designated
// constraints aren't met.
type GetAccountInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountInfoReplyMultiError) AllErrors() []error { return m }

// GetAccountInfoReplyValidationError is the validation error returned by
// GetAccountInfoReply.Validate if the designated constraints aren't met.
type GetAccountInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoReplyValidationError) ErrorName() string {
	return "GetAccountInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoReplyValidationError{}

// Validate checks the field values on GetAllAccountsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllAccountsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllAccountsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllAccountsReplyMultiError, or nil if none found.
func (m *GetAllAccountsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllAccountsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllAccountsReplyMultiError(errors)
	}

	return nil
}

// GetAllAccountsReplyMultiError is an error wrapping multiple validation
// errors returned by GetAllAccountsReply.ValidateAll() if the designated
// constraints aren't met.
type GetAllAccountsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllAccountsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllAccountsReplyMultiError) AllErrors() []error { return m }

// GetAllAccountsReplyValidationError is the validation error returned by
// GetAllAccountsReply.Validate if the designated constraints aren't met.
type GetAllAccountsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllAccountsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllAccountsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllAccountsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllAccountsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllAccountsReplyValidationError) ErrorName() string {
	return "GetAllAccountsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllAccountsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllAccountsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllAccountsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllAccountsReplyValidationError{}

// Validate checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountRequestMultiError, or nil if none found.
func (m *DeleteAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return DeleteAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteAccountRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountRequestMultiError) AllErrors() []error { return m }

// DeleteAccountRequestValidationError is the validation error returned by
// DeleteAccountRequest.Validate if the designated constraints aren't met.
type DeleteAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountRequestValidationError) ErrorName() string {
	return "DeleteAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountRequestValidationError{}

// Validate checks the field values on DeleteAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountReplyMultiError, or nil if none found.
func (m *DeleteAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResultCode

	if len(errors) > 0 {
		return DeleteAccountReplyMultiError(errors)
	}

	return nil
}

// DeleteAccountReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteAccountReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountReplyMultiError) AllErrors() []error { return m }

// DeleteAccountReplyValidationError is the validation error returned by
// DeleteAccountReply.Validate if the designated constraints aren't met.
type DeleteAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountReplyValidationError) ErrorName() string {
	return "DeleteAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountReplyValidationError{}

// Validate checks the field values on TransferFundsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferFundsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferFundsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferFundsRequestMultiError, or nil if none found.
func (m *TransferFundsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferFundsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for DestAccount

	// no validation rules for Amount

	if len(errors) > 0 {
		return TransferFundsRequestMultiError(errors)
	}

	return nil
}

// TransferFundsRequestMultiError is an error wrapping multiple validation
// errors returned by TransferFundsRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferFundsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferFundsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferFundsRequestMultiError) AllErrors() []error { return m }

// TransferFundsRequestValidationError is the validation error returned by
// TransferFundsRequest.Validate if the designated constraints aren't met.
type TransferFundsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferFundsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferFundsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferFundsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferFundsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferFundsRequestValidationError) ErrorName() string {
	return "TransferFundsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferFundsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferFundsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferFundsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferFundsRequestValidationError{}

// Validate checks the field values on TransferFundsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferFundsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferFundsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferFundsReplyMultiError, or nil if none found.
func (m *TransferFundsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferFundsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	if len(errors) > 0 {
		return TransferFundsReplyMultiError(errors)
	}

	return nil
}

// TransferFundsReplyMultiError is an error wrapping multiple validation errors
// returned by TransferFundsReply.ValidateAll() if the designated constraints
// aren't met.
type TransferFundsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferFundsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferFundsReplyMultiError) AllErrors() []error { return m }

// TransferFundsReplyValidationError is the validation error returned by
// TransferFundsReply.Validate if the designated constraints aren't met.
type TransferFundsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferFundsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferFundsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferFundsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferFundsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferFundsReplyValidationError) ErrorName() string {
	return "TransferFundsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e TransferFundsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferFundsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferFundsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferFundsReplyValidationError{}

// Validate checks the field values on ShowHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShowHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowHistoryRequestMultiError, or nil if none found.
func (m *ShowHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return ShowHistoryRequestMultiError(errors)
	}

	return nil
}

// ShowHistoryRequestMultiError is an error wrapping multiple validation errors
// returned by ShowHistoryRequest.ValidateAll() if the designated constraints
// aren't met.
type ShowHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowHistoryRequestMultiError) AllErrors() []error { return m }

// ShowHistoryRequestValidationError is the validation error returned by
// ShowHistoryRequest.Validate if the designated constraints aren't met.
type ShowHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowHistoryRequestValidationError) ErrorName() string {
	return "ShowHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShowHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowHistoryRequestValidationError{}

// Validate checks the field values on ShowHistoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShowHistoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowHistoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowHistoryReplyMultiError, or nil if none found.
func (m *ShowHistoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowHistoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransfers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShowHistoryReplyValidationError{
						field:  fmt.Sprintf("Transfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShowHistoryReplyValidationError{
						field:  fmt.Sprintf("Transfers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShowHistoryReplyValidationError{
					field:  fmt.Sprintf("Transfers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShowHistoryReplyMultiError(errors)
	}

	return nil
}

// ShowHistoryReplyMultiError is an error wrapping multiple validation errors
// returned by ShowHistoryReply.ValidateAll() if the designated constraints
// aren't met.
type ShowHistoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowHistoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowHistoryReplyMultiError) AllErrors() []error { return m }

// ShowHistoryReplyValidationError is the validation error returned by
// ShowHistoryReply.Validate if the designated constraints aren't met.
type ShowHistoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowHistoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowHistoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowHistoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowHistoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowHistoryReplyValidationError) ErrorName() string { return "ShowHistoryReplyValidationError" }

// Error satisfies the builtin error interface
func (e ShowHistoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowHistoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowHistoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowHistoryReplyValidationError{}

// Validate checks the field values on ShowHistoryReply_HistoryEntry with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShowHistoryReply_HistoryEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowHistoryReply_HistoryEntry with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ShowHistoryReply_HistoryEntryMultiError, or nil if none found.
func (m *ShowHistoryReply_HistoryEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowHistoryReply_HistoryEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for AccountId

	// no validation rules for Amount

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowHistoryReply_HistoryEntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowHistoryReply_HistoryEntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowHistoryReply_HistoryEntryValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShowHistoryReply_HistoryEntryMultiError(errors)
	}

	return nil
}

// ShowHistoryReply_HistoryEntryMultiError is an error wrapping multiple
// validation errors returned by ShowHistoryReply_HistoryEntry.ValidateAll()
// if the designated constraints aren't met.
type ShowHistoryReply_HistoryEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowHistoryReply_HistoryEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowHistoryReply_HistoryEntryMultiError) AllErrors() []error { return m }

// ShowHistoryReply_HistoryEntryValidationError is the validation error
// returned by ShowHistoryReply_HistoryEntry.Validate if the designated
// constraints aren't met.
type ShowHistoryReply_HistoryEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowHistoryReply_HistoryEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowHistoryReply_HistoryEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowHistoryReply_HistoryEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowHistoryReply_HistoryEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowHistoryReply_HistoryEntryValidationError) ErrorName() string {
	return "ShowHistoryReply_HistoryEntryValidationError"
}

// Error satisfies the builtin error interface
func (e ShowHistoryReply_HistoryEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowHistoryReply_HistoryEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowHistoryReply_HistoryEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowHistoryReply_HistoryEntryValidationError{}
